import unittest
from unittest.mock import patch, MagicMock, AsyncMock
from chimera_intel.core.vulnerability_scanner import (
    run_port_scan,
    run_vulnerability_scan,
)
from chimera_intel.core.schemas import (
    FootprintResult,
    FootprintData,
    SubdomainReport,
    ScoredResult,
)
import nmap


class TestVulnerabilityScanner(unittest.TestCase):
    """Test cases for the vulnerability scanner module."""

    @patch("chimera_intel.core.vulnerability_scanner.nmap.PortScanner")
    def test_run_port_scan_success(self, mock_port_scanner):
        """Tests a successful port scan with open ports."""
        mock_nm = MagicMock()
        mock_nm.all_hosts.return_value = ["127.0.0.1"]
        mock_nm["127.0.0.1"].state.return_value = "up"
        mock_nm["127.0.0.1"].all_protocols.return_value = ["tcp"]
        mock_nm["127.0.0.1"]["tcp"].keys.return_value = [80, 443]
        mock_nm["127.0.0.1"]["tcp"][80] = {
            "state": "open",
            "name": "http",
            "product": "nginx",
            "version": "1.21",
        }
        mock_nm["127.0.0.1"]["tcp"][443] = {"state": "open", "name": "https"}

        mock_port_scanner.return_value = mock_nm

        result = run_port_scan("127.0.0.1")
        self.assertEqual(result.host, "127.0.0.1")
        self.assertEqual(result.state, "up")
        self.assertEqual(len(result.open_ports), 2)
        self.assertEqual(result.open_ports[0].port, 80)
        self.assertEqual(result.open_ports[0].product, "nginx")

    @patch("chimera_intel.core.vulnerability_scanner.nmap.PortScanner")
    def test_run_port_scan_nmap_not_found(self, mock_port_scanner):
        """Tests the case where nmap is not installed on the system."""
        mock_port_scanner.side_effect = nmap.PortScannerError("Nmap not found")

        result = run_port_scan("127.0.0.1")
        self.assertIn("Nmap not found", result.error)

    @patch("chimera_intel.core.vulnerability_scanner.nmap.PortScanner")
    def test_run_port_scan_unexpected_error(self, mock_port_scanner):
        """Tests the case where an unexpected error occurs during scan."""
        mock_port_scanner.return_value.scan.side_effect = Exception(
            "Unexpected failure"
        )

        result = run_port_scan("127.0.0.1")
        self.assertIsNotNone(result.error)
        self.assertIn("Unexpected failure", result.error)

    @patch(
        "chimera_intel.core.vulnerability_scanner.gather_footprint_data",
        new_callable=AsyncMock,
    )
    @patch("chimera_intel.core.vulnerability_scanner.run_port_scan")
    @patch("chimera_intel.core.vulnerability_scanner.save_or_print_results")
    @patch("chimera_intel.core.vulnerability_scanner.save_scan_to_db")
    def test_run_vulnerability_scan_command(
        self, mock_save_db, mock_save_print, mock_run_port_scan, mock_gather_footprint
    ):
        """Tests the main vulnerability scan command function."""
        mock_footprint_result = FootprintResult(
            domain="example.com",
            footprint=FootprintData(
                whois_info={},
                dns_records={"A": ["1.1.1.1"]},
                subdomains=SubdomainReport(
                    total_unique=1,
                    results=[
                        ScoredResult(
                            domain="sub.example.com",
                            confidence="HIGH",
                            sources=["test"],
                        )
                    ],
                ),
            ),
        )
        mock_gather_footprint.return_value = mock_footprint_result
        mock_run_port_scan.return_value = MagicMock()

        run_vulnerability_scan("example.com")

        self.assertGreaterEqual(mock_run_port_scan.call_count, 3)
        mock_save_print.assert_called_once()
        mock_save_db.assert_called_once()


if __name__ == "__main__":
    unittest.main()
