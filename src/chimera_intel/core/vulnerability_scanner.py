import typer
import nmap
import logging
from typing import List
from .schemas import PortDetail, HostScanResult, VulnerabilityScanResult
from .footprint import gather_footprint_data
from .utils import save_or_print_results, console
from .database import save_scan_to_db

logger = logging.getLogger(__name__)


def run_port_scan(target: str) -> HostScanResult:
    """
    Performs a port scan on a single target using python-nmap.

    Args:
        target (str): The IP address or hostname to scan.

    Returns:
        HostScanResult: A Pydantic model containing the scan results.
    """
    try:
        nm = nmap.PortScanner()
        # '-sV' tries to determine the version of the service running on port

        nm.scan(target, arguments="-sV -T4")

        open_ports: List[PortDetail] = []
        host_state = "down"

        if target in nm.all_hosts():
            host_state = nm[target].state()
            for proto in nm[target].all_protocols():
                ports = nm[target][proto].keys()
                for port in ports:
                    port_info = nm[target][proto][port]
                    open_ports.append(
                        PortDetail(
                            port=port,
                            state=port_info["state"],
                            service=port_info["name"],
                            product=port_info.get("product"),
                            version=port_info.get("version"),
                        )
                    )
        return HostScanResult(host=target, state=host_state, open_ports=open_ports)
    except nmap.PortScannerError:
        logger.error("Nmap not found. Please install nmap on your system.")
        return HostScanResult(
            host=target, state="error", open_ports=[], error="Nmap not found."
        )
    except Exception as e:
        logger.error(
            "An unexpected error occurred during Nmap scan of '%s': %s", target, e
        )
        return HostScanResult(host=target, state="error", open_ports=[], error=str(e))


# --- Typer CLI Application ---

vulnerability_app = typer.Typer()


@vulnerability_app.command("run")
async def run_vulnerability_scan(
    domain: str = typer.Argument(..., help="The root domain to scan."),
    output_file: str = typer.Option(
        None, "--output", "-o", help="Save results to a JSON file."
    ),
):
    """
    Discovers assets via footprint and scans them for open ports.

    Args:
        domain (str): The root domain to scan.
        output_file (str): Optional path to save results to a JSON file.
    """
    logger.info("Starting vulnerability scan for assets of %s", domain)

    # Step 1: Discover assets using the footprint module

    console.print(f"[bold cyan]Discovering assets for {domain}...[/bold cyan]")
    footprint_results = await gather_footprint_data(domain)

    hosts_to_scan = {domain}  # Start with the main domain
    if footprint_results.footprint.subdomains:
        for sub in footprint_results.footprint.subdomains.results:
            if sub.domain:  # Ensure domain is not None
                hosts_to_scan.add(sub.domain)
    if (
        footprint_results.footprint.dns_records
        and footprint_results.footprint.dns_records.get("A")
    ):
        # Ensure dns_records['A'] is not None before iterating

        for ip in footprint_results.footprint.dns_records.get("A") or []:
            hosts_to_scan.add(ip)
    console.print(f"Found {len(hosts_to_scan)} unique hosts to scan.")

    # Step 2: Scan each discovered host

    scanned_hosts_results: List[HostScanResult] = []
    for host in sorted(list(hosts_to_scan)):
        console.print(f"  -> Scanning host: [bold]{host}[/bold]")
        scan_result = run_port_scan(host)
        scanned_hosts_results.append(scan_result)
    # Step 3: Aggregate and save results

    final_result = VulnerabilityScanResult(
        target_domain=domain, scanned_hosts=scanned_hosts_results
    )

    results_dict = final_result.model_dump(exclude_none=True)
    save_or_print_results(results_dict, output_file)
    save_scan_to_db(target=domain, module="vulnerability_scanner", data=results_dict)
    logger.info("Vulnerability scan complete for %s", domain)
